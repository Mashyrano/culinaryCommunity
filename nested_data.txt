def fetch_image_from_api(tag_name):
    tag_name = tag_name.lower().replace("-", " ")
    url = f'http://127.0.0.1:8000/API/search_light/?tags={tag_name}'

    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            time.sleep(0.5)
            return data.get("image", None)
        elif response.status_code == 429:  # Handle rate-limiting
            print(f"Rate limit hit. Retrying for tag: {tag_name}")
            time.sleep(5)  # Wait 5 seconds before retrying
            return fetch_image_from_api(tag_name)
    except Exception as e:
        print(f"Error fetching image for tag {tag_name}: {e}")
    return None


def populate_images():
    # Populate images for Tags
    tags = Tags.objects.all()
    for tag in tags:
        if not tag.image_url:  # Only update if the field is empty
            print(f"Fetching image for tag: {tag.name}")
            tag.image_url = fetch_image_from_api(tag.name)
            tag.save()

    # Populate images for Parent_tags
    parents = Parent_tags.objects.all()
    for parent in parents:
        if not parent.image_url:  # Only update if the field is empty
            print(f"Fetching image for parent: {parent.name}")
            # Get a random tag under this parent
            random_tag = Tags.objects.filter(parent=parent).order_by('?').first()
            if random_tag:
                parent.image_url = fetch_image_from_api(random_tag.name)
                parent.save()

    # Populate images for Root_tags
    roots = Root_tags.objects.all()
    for root in roots:
        if not root.image_url:  # Only update if the field is empty
            print(f"Fetching image for root: {root.name}")
            # Get a random parent under this root
            random_parent = Parent_tags.objects.filter(root=root).order_by('?').first()
            if random_parent:
                # Get a random tag under this parent
                random_tag = Tags.objects.filter(parent=random_parent).order_by('?').first()
                if random_tag:
                    root.image_url = fetch_image_from_api(random_tag.name)
                    root.save()

{
	"cuisine": {
		"european": [
			"Italian",
			"Swedish",
			"Mediterranean",
			"British",
			"German",
			"French",
			"Polish"
		],
		"asian": [
			"Thai",
			"Filipino",
			"Taiwanese",
			"Japanese",
			"Korean",
			"Laotian",
			"Chinese",
			"Indian",
			"Vietnamese"
		],
		"cuisine": [
			"Caribbean",
			"Asian",
			"European",
			"North American",
			"African",
			"Jewish",
			"Central & South American",
			"Middle Eastern",
			"Fusion",
			"Indigenous"
		],
		"middle_eastern": [
			"Lebanese",
			"Persian"
		],
		"north_american": [
			"Southern",
			"Mexican",
			"Hawaiian",
			"Southwestern",
			"Soul Food"
		],
		"caribbean": [
			"Cuban",
			"Dominican",
			"Puerto Rican",
			"Haitian",
			"Jamaican"
		],
		"central_south_american": [
			"Venezuelan",
			"Brazilian",
			"Peruvian"
		],
		"african": [
			"Kenyan",
			"South African",
			"Ethiopian",
			"West African"
		]
	},
	"dietary": {
		"dietary": [
			"Vegetarian",
			"Pescatarian",
			"Kosher",
			"Dairy-Free",
			"Vegan",
			"Keto",
			"Alcohol-Free",
			"Halal",
			"Gluten-Free"
		]
	},
	"difficulty": {
		"difficulty": [
			"Under 30 Minutes",
			"Under 45 Minutes",
			"5 Ingredients or Less",
			"Easy",
			"Under 1 Hour",
			"Under 15 Minutes"
		]
	},
	"seasonal": {
		"holidays": [
			"Valentine's Day",
			"Passover",
			"Lunar New Year",
			"St. Patrick's Day",
			"Cinco de Mayo",
			"Mother's Day",
			"New Years",
			"4th of July",
			"Christmas",
			"Easter",
			"Thanksgiving",
			"Halloween"
		],
		"occasion": [
			"Party",
			"Date Night",
			"Special Occasion",
			"Picnic",
			"BBQ",
			"Game Day"
		],
		"seasonal": [
			"Holidays",
			"Occasion",
			"Spring",
			"Winter",
			"Summer",
			"Fall"
		]
	},
	"meal": {
		"meal": [
			"Breakfast",
			"Dinner",
			"Appetizers",
			"Brunch",
			"Desserts",
			"Drinks",
			"Lunch",
			"Snacks",
			"Sides"
		],
		"breakfast": [
			"Sweet Breakfasts",
			"Egg Breakfasts",
			"National Sandwich Day",
			"Smoothies & Smoothie Bowls",
			"Breakfast Sandwiches",
			"Breads & Pastries",
			"English Muffins",
			"Better Breakfast",
			"Beverages"
		],
		"salads": [
			"Coleslaws",
			"Dressings",
			"Fruit Salads",
			"Pasta Salads"
		],
		"dinner": [
			"Beef",
			"Stews",
			"Stir Fry",
			"Pork",
			"Pot Roast",
			"Soups",
			"Seafood",
			"Casseroles",
			"Pizza",
			"Chicken",
			"Meat Loaf",
			"Burgers",
			"Kabobs",
			"Quiches",
			"Tacos & Burritos",
			"Weeknight",
			"Chilis",
			"Pasta"
		],
		"pasta": [
			"Lasagna",
			"Macaroni & Cheese",
			"Baked Pasta",
			"Seafood Pasta"
		],
		"seafood": [
			"Fish",
			"Shellfish"
		],
		"desserts": [
			"Pie and Cobblers",
			"Puddings",
			"Cookies",
			"Pastries",
			"Brownies",
			"Cakes",
			"Ice Cream"
		],
		"cocktails": [
			"Gin",
			"Rum",
			"Tequila",
			"Vodka",
			"Whiskey"
		],
		"sweet_breakfasts": [
			"Pancakes",
			"Waffles"
		],
		"lunch": [
			"Salads",
			"Sandwiches",
			"Sandwiches For Every Taste",
			"Wraps"
		],
		"cakes": [
			"Cupcakes",
			"Cheesecakes"
		],
		"ice_cream": [
			"Ice Cream Cakes",
			"Ice Cream Sandwiches"
		],
		"drinks": [
			"Cocktails",
			"Coffee",
			"Shakes",
			"Mocktails",
			"Juices"
		],
		"appetizers": [
			"Sliders",
			"Dips"
		]
	},
	"cooking_style": {
		"cooking_style": [
			"Kid-Friendly",
			"Big Batch",
			"Pan Fry",
			"Deep-Fry",
			"Comfort Food",
			"No Bake Desserts",
			"Steam",
			"Meal Prep",
			"Grill",
			"One-Pot or Pan",
			"Budget"
		]
	},
	"appliance": {
		"appliance": [
			"Blender",
			"Microwave",
			"Air Fryer",
			"Baking",
			"Broiler",
			"Cast Iron Pan",
			"Slow Cooker",
			"Wok",
			"Dutch Oven",
			"Freezer Friendly",
			"Bakery Goods"
		],
		"baking": [
			"Bread",
			"Rolls"
		]
	},
	"healthy": {
		"healthy": [
			"Low-Calorie",
			"High-Fiber",
			"High-Protein",
			"Low-Sugar",
			"Low-Carb",
			"Low-Fat"
		]
	},
	"	": {
		"ingredients_to_avoid": [
			"Seafood",
			"Soy",
			"Tree nuts",
			"Beef",
			"Chicken",
			"Eggs",
			"Dairy",
			"Shellfish",
			"Gluten",
			"Pork",
			"Peanuts"
		]
	}
}